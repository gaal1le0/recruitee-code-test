//
//  ManagerConnections.swift
//  Recruitee-code-test
//
//  Created by Emanuel Mart√≠nez on 12/5/22.
//

import Foundation

import RxSwift


class ManagerConnections {
    
<<<<<<< HEAD
    func getSummaryMarket() -> Observable<[Result]> {
=======
    enum GetSummaryMarketFailureReason: Int, Error {
        case unAuthorized = 401
        case notFound = 404
        case moved = 302
    }
    
    func getSummaryMarket() -> Observable<[Market]> {
>>>>>>> release/1.1
        return Observable.create { observer in
            
            let headers = [
                Constants.Headers.host: Constants.Endpoints.singleEndPoint,
                Constants.Headers.apyKey: Constants.apiKey
            ]
<<<<<<< HEAD

            
            let request = NSMutableURLRequest(url: NSURL(string: Constants.URL.main + Constants.Endpoints.urlMarketGetSummary)! as URL,
                                                    cachePolicy: .useProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.httpMethod = "GET"
            request.allHTTPHeaderFields = headers

=======
            
            
            let request = NSMutableURLRequest(url: NSURL(string: Constants.URL.main + Constants.Endpoints.urlMarketGetSummary)! as URL,
                                              cachePolicy: .useProtocolCachePolicy,
                                              timeoutInterval: 10.0)
            request.httpMethod = Constants.Method.get
            request.allHTTPHeaderFields = headers
            
>>>>>>> release/1.1
            let session = URLSession.shared
            session.dataTask(with: request as URLRequest) { (data, response, error) -> Void in
                
                
                guard let data = data, error == nil, let response = response as? HTTPURLResponse else { return }
                
                if response.statusCode == 200 {
                    
                    do {
                        let decoder = JSONDecoder()
                        let market = try decoder.decode(MarketSummary.self, from: data)
                        
                        print("Estamos recuperando la stock: \(market.marketSummaryAndSparkResponse.result[0])")
                        observer.onNext(market.marketSummaryAndSparkResponse.result)
                    } catch let error {
                        print("Ha ocurrido un error: \(error.localizedDescription)")
                    }
                }
                else if response.statusCode == 401 {
                    print("Error 401")
                }
                observer.onCompleted()
            }.resume()
            
            return Disposables.create {
<<<<<<< HEAD
                //session.finishTasksAndInvalidate()
=======
>>>>>>> release/1.1
            }
        }
    }
    
    func getDetailStock(fullExchangeName: String) -> Observable<QuoteType> {
<<<<<<< HEAD
=======
        print("se recibe el param: \(String(describing: fullExchangeName))")
>>>>>>> release/1.1
        return Observable.create { observer in
            
            let headers = [
                Constants.Headers.host: Constants.Endpoints.singleEndPoint,
                Constants.Headers.apyKey: Constants.apiKey
            ]
            
<<<<<<< HEAD
            let url = Constants.URL.main + Constants.Endpoints.urlStockGetSummary+Constants.Parameter.symbol+fullExchangeName+Constants.Parameter.region
            
            let urlString = url.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)

            
            let request = NSMutableURLRequest(url: NSURL(string: urlString ?? "")! as URL,
                                                    cachePolicy: .useProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.httpMethod = "GET"
            request.allHTTPHeaderFields = headers

            let session = URLSession.shared
            session.dataTask(with: request as URLRequest) { (data, response, error) -> Void in
                
                
=======
            let fullExchangeNameTrimmed = fullExchangeName.removeWhitespace()
            
            let request = NSMutableURLRequest(url: NSURL(string: Constants.URL.main + Constants.Endpoints.urlStockGetSummary+Constants.Parameter.symbol+fullExchangeNameTrimmed+Constants.Parameter.region)! as URL,
                                              cachePolicy: .useProtocolCachePolicy,
                                              timeoutInterval: 10.0)
            request.httpMethod = Constants.Method.get
            request.allHTTPHeaderFields = headers
            
            let session = URLSession.shared
            session.dataTask(with: request as URLRequest) { (data, response, error) -> Void in
                
>>>>>>> release/1.1
                guard let data = data, error == nil, let response = response as? HTTPURLResponse else { return }
                
                if response.statusCode == 200 {
                    
                    do {
                        let decoder = JSONDecoder()
                        let stock = try decoder.decode(Stock.self, from: data)
                        guard let quoteType = stock.quoteType else { return }
<<<<<<< HEAD
                        observer.onNext(quoteType)
                    } catch let error {
                        print("Error: \(error.localizedDescription)")
=======
                        print("Estamos recuperando la stock: \(String(describing: stock.quoteType?.symbol))")
                        observer.onNext(quoteType)
                    } catch let error {
                        print("Ha ocurrido un error: \(error.localizedDescription)")
>>>>>>> release/1.1
                    }
                }
                else if response.statusCode == 401 {
                    print("Error 401")
<<<<<<< HEAD
=======
                    observer.onError(AppError.invalidParam)
                }
                else if response.statusCode == 302 {
                    print("Error 302")
                    observer.onError(AppError.invalidParam)
>>>>>>> release/1.1
                }
                observer.onCompleted()
            }.resume()
            
            return Disposables.create {
<<<<<<< HEAD
                //session.finishTasksAndInvalidate()
            }
        }
    }
    
    //   static func getMarketSummary() {
    //        let headers = [
    //            Constants.Headers.host: Constants.Endpoints.singleEndPoint,
    //            Constants.Headers.apyKey: Constants.apiKey
    //        ]
    //
    //        let request = NSMutableURLRequest(url: NSURL(string: Constants.URL.main + Constants.Endpoints.urlMarketGetSummary)! as URL,
    //                                                cachePolicy: .useProtocolCachePolicy,
    //                                            timeoutInterval: 10.0)
    //       request.httpMethod = Constants.Method.get
    //        request.allHTTPHeaderFields = headers
    //
    //        let session = URLSession.shared
    //        let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
    //
    //            guard let data = data, error == nil, let response = response as? HTTPURLResponse else { return }
    //
    //                if response.statusCode == 200 {
    //
    //                    do {
    //                        let decoder = JSONDecoder()
    //                        let stock = try decoder.decode(MarketSummary.self, from: data)
    //
    //                        print("Estamos recuperando la stock: \(stock.marketSummaryAndSparkResponse.result[0])")
    //                    } catch let error {
    //                        print("Ha ocurrido un error: \(error.localizedDescription)")
    //                    }
    //                }
    //        })
    //
    //        dataTask.resume()
    //    }
=======
            }
        }
    }
>>>>>>> release/1.1
}
